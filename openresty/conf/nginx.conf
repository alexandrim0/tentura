{% ACME_EMAIL = os.getenv'ACME_EMAIL' %}

daemon                              off;
pcre_jit                            on;
timer_resolution                    100ms;
worker_processes                    {* os.getenv'WORKERS' or 'auto' *};
pid                                 /var/run/openresty/nginx.pid;

error_log                           stderr  {* os.getenv'ERROR_LOG_LEVEL' or 'info' *};

events  {
    worker_connections              {* os.getenv'WORKER_CONNECTIONS' or 1024 *};
}

http  {
    gzip                            on;
    access_log                      off;

    log_format  json  escape=json  '{'
        '"method":"$request_method",'
        '"uri":"$uri",'
        '"response_status":$status,'
        '"request_time":$request_time'
    '}';

    types  {
        application/javascript      js  mjs;
        application/json            json;
        application/wasm            wasm;
        text/css                    css;
        text/plain                  txt;
        text/html                   htm  html  shtml;
        image/jpeg                  jpeg  jpg;
        image/webp                  webp;
        image/png                   png;
        image/svg+xml               svg;
    }

    sendfile                        on;
    tcp_nopush                      on;
    tcp_nodelay                     on;
    server_tokens                   off;
    reset_timedout_connection       on;

    send_timeout                    15;
    keepalive_timeout               75;
    client_body_timeout             15;
    client_max_body_size            {* os.getenv'CLIENT_MAX_BODY_SIZE' or '1m' *};
    client_body_buffer_size         {* os.getenv'CLIENT_BODY_BUFFER_SIZE' or '1m' *};
    client_body_temp_path           /tmp/nginx-client-body;
    proxy_temp_path                 /tmp/nginx-proxy;
    resolver_timeout                5s;
    resolver                        {* os.getenv'RESOLVER' or '127.0.0.11' *}  valid=60s  ipv6=off;

    lua_ssl_verify_depth            2;
    lua_socket_log_errors           off;
    lua_ssl_trusted_certificate     /etc/ssl/certs/ca-certificates.crt;
    lua_socket_pool_size            {* os.getenv'LUA_SOCKET_POOL_SIZE' or 2048 *};
    lua_code_cache                  {* os.getenv'LUA_CODE_CACHE' or 'on' *};

    ssl_trusted_certificate         /etc/ssl/certs/ca-certificates.crt;
    ssl_certificate                 /etc/nginx/pem/rsa_cert.pem;
    ssl_certificate_key             /etc/nginx/pem/rsa_key.pem;
    ssl_certificate                 /etc/nginx/pem/ec_cert.pem;
    ssl_certificate_key             /etc/nginx/pem/ec_key.pem;
    ssl_dhparam                     /etc/nginx/pem/dhparam.pem;
    ssl_ecdh_curve                  prime256v1:secp384r1;
    ssl_session_cache               shared:ssl:8m;
    ssl_buffer_size                 8k;
    ssl_session_tickets             off;
    ssl_session_timeout             15m;
    ssl_stapling_verify             on;
    ssl_stapling                    on;
    ssl_prefer_server_ciphers       on;
    ssl_protocols                   TLSv1.3;
    ssl_ciphers                     ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

{% if ACME_EMAIL then %}
    init_by_lua_block  {
        require'resty.acme.autossl'.init{
            account_email = '{* ACME_EMAIL *}',
            domain_whitelist = {
                '{* os.getenv"SERVER_NAME" *}',
            },
            storage_config = {
                dir = '/etc/nginx/cert',
            },
            account_key_path = '/etc/nginx/pem/account_key.pem',
            domain_key_types = { 'rsa', 'ecc' },
            storage_adapter = 'file',
            tos_accepted = true,
            staging = false,
        };
    }

    init_worker_by_lua_block  {
        require'resty.acme.autossl'.init_worker();
    }
{% end %}

    upstream  hasura  {
        server      hasura:8080;
        keepalive   {* os.getenv'HASURA_KEEPALIVE' or 2 *};
    }

    upstream  tentura  {
        server      tentura:2080;
        keepalive   {* os.getenv'TENTURA_KEEPALIVE' or 2 *};
    }

    map  $http_upgrade  $connection_upgrade  {
        default                     upgrade;
        ''                          close;
    }

    map  $http_content_type  $backend  {
        default                     "http://hasura/v1/graphql";
        "~^multipart.*$"            "http://tentura/api/v2/graphql";
    }

    server  {
        listen                      80;

{% if ACME_EMAIL then %}
        location  /.well-known/acme-challenge/  {
            content_by_lua_block {
                require'resty.acme.autossl'.serve_http_challenge();
            }
        }
{% end %}

        location  /  {
            return  301  https://$host$request_uri;
        }        
    }

    server  {
        http2                       on;
        listen                      443  ssl;

        access_log                  /dev/stdout  json;

{% if ACME_EMAIL then %}
        ssl_certificate_by_lua_block  {
            require'resty.acme.autossl'.ssl_certificate();
        }

        location  /.well-known/acme-challenge/  {
            content_by_lua_block {
                require'resty.acme.autossl'.serve_http_challenge();
            }
        }
{% end %}

        location  /api/  {
            proxy_http_version      1.1;
            proxy_pass              http://hasura/;
        }

        location  =  /api/v1/graphql  {
            proxy_connect_timeout   1h;
            proxy_read_timeout      1h;
            proxy_send_timeout      1h;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade         $http_upgrade;
            proxy_set_header        Connection      $connection_upgrade;
            proxy_pass              $backend;
        }

        location  =  /api/v2/graphql  {
            proxy_connect_timeout   1h;
            proxy_read_timeout      1h;
            proxy_send_timeout      1h;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade         $http_upgrade;
            proxy_set_header        Connection      $connection_upgrade;
            proxy_pass              http://tentura;
        }

        location  =  /api/v2/ws  {
            proxy_connect_timeout   1h;
            proxy_read_timeout      1h;
            proxy_send_timeout      1h;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade         $http_upgrade;
            proxy_set_header        Connection      $connection_upgrade;
            proxy_pass              http://tentura;
        }

        location  /shared/  {
            # TODO: cache
            proxy_http_version      1.1;
            proxy_pass              http://tentura;
        }

{% if os.getenv'PGADMIN_ENABLED' then %}
        location  /pgadmin4/  {
            proxy_set_header        X-Script-Name  /pgadmin4;
            proxy_set_header        Host  $host;
            proxy_pass              http://pgadmin:80/;
            proxy_redirect          off;
        }
{% end %}

        location  /  {
            etag                    on;
            expires                 modified  {* os.getenv'CONTENT_EXPIRES' or '+1d' *};
            add_header              Cross-Origin-Opener-Policy          "same-origin";
            add_header              Cross-Origin-Embedder-Policy        "credentialless";
            add_header              Access-Control-Allow-Credentials    false  always;
            add_header              Access-Control-Allow-Methods        "GET, POST, OPTIONS"  always;
            add_header              Access-Control-Allow-Origin         "{* os.getenv'CORS' or '*' *}"  always;
            try_files               $uri  /index.html;
        }
    }
}
